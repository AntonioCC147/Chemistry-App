'use strict';

var React    = require('react')
var assign   = require('object-assign')
var Button   = require('react-button')
var DDButton = require('react-dropdown-button')

function returnFalse(){
    return false
}

var PROPS_2_BUTTON_PROPS = [
    'fn',
    'onClick',
    'onToggle',
    'onMenuClick',
    'href',
    'align',
    'pressed',
    'defaultPressed',
    'label',
    'ellipsis',
    'children'
]

var PROPS_2_ALL_PROPS = [
    'disabled',
    'theme',
    'themes'
]

var PROPS_2_ARROW_PROPS = [
    'getAlignTarget',
    'menuProps',
    'alignPositions',
    'alignOffset',
    'items',
    'menu',
    'menuFactory',
    'arrow',
    'renderMenu',
    'onMenuChange',
    'onMenuClick',
    'hideMenuOnClick',
    'menuParentId'
]

function emptyFn(){}

function copyFn(source, target){
    return function(name){
        if (source[name] != null){
            target[name] = source[name]
        }
    }
}

function transfer(list, target, source){
    list.forEach(copyFn(source, target))
}

function prepareRadius(props, target, side){
    side = side == 'left'? 'Left': 'Right'

    var style = props.style

    var borderTopSideName = 'borderTop' + side + 'Radius'
    var borderBottomSideName = 'borderBottom' + side + 'Radius'

    target[borderTopSideName]    = style[borderTopSideName] == null? style.borderRadius: style[borderTopSideName]
    target[borderBottomSideName] = style[borderBottomSideName] == null? style.borderRadius: style[borderBottomSideName]
}

//we do not apply the border to the SplitButton, but to the buttons it contains
//since if we were to apply the border to the SplitButton, when it has borderRadius, it would not be displayed well (especially on mouse over)
//
//so we move the border to the buttons below it, so they get rendered nicely
function prepareBorder(props, target, side){
    var otherSide = side == 'left'? 'Right': 'Left'
    side = side == 'left'? 'Left': 'Right'

    var style = props.style

    var border = style.border
    var borderTop = style.borderTop == null? border: style.borderTop
    var borderBottom = style.borderBottom == null? border: style.borderBottom

    var borderSideName = 'border' + side
    var borderOtherSideName = 'border' + otherSide

    var borderSide = style[borderSideName] == null? border: style[borderSideName]
    var borderOtherSide = style[borderOtherSideName] == null? border: style[borderOtherSideName]
    // debugger

    target.borderLeft      = 0
    target.borderRight     = 0
    target.borderTop       = borderTop
    target.borderBottom    = borderBottom
    target[borderSideName] = borderSide

    target[borderOtherSideName] = side == 'Right'? props.splitBorder || borderOtherSide: 0
}

function clearBorder(style){
    ['border','borderLeft','borderRight','borderTop','borderBottom'].forEach(function(name){
        style[name] = 0
    })
}

var DISPLAY_NAME = 'ReactSplitButton'

module.exports = React.createClass({

    displayName: DISPLAY_NAME,

    getDefaultProps: function() {
        return {
            displayName: DISPLAY_NAME,

            defaultStyle: {
                display      : 'inline-flex',
                boxSizing    : 'border-box',
                alignItems   : 'center',
                flexFlow     : 'row',
                verticalAlign: 'top',

                margin: 2
            },

            defaultCommonStyle: {
            },

            defaultButtonStyle: {
                alignSelf: 'stretch',
                flex   : 1,
                margin : 0
            },

            defaultArrowStyle: {
                alignSelf: 'stretch',
                margin : 0
            },

            defaultArrowProps: {
                smartArrowPadding: false
            },

            arrowPosition: 'right'
        }
    },

    getInitialState: function() {
        return {}
    },

    render: function(){

        var state = this.state
        var props = this.prepareProps(this.props, state)

        return React.createElement("div", {"data-display-name": props['data-display-name'], style: props.style, children: props.children})
    },

    prepareProps: function(thisProps, state) {
        var props = {}

        assign(props, thisProps)

        props['data-display-name'] = props['data-display-name'] || DISPLAY_NAME
        props.buttonSide = props.arrowPosition == 'right'? 'left' : 'right'
        props.arrowSide  = props.arrowPosition == 'right'? 'right': 'left'

        props.style       = this.prepareStyle(props)
        props.buttonProps = this.prepareButtonProps(props)
        props.arrowProps  = this.prepareArrowProps(props)

        //see comment at #prepareBorder
        clearBorder(props.style)

        props.children = this.prepareChildren(props)

        return props
    },

    prepareChildren: function(props) {
        var arrow = React.createElement(DDButton, React.__spread({ref: "arrow"},  props.arrowProps))

        var leftArrow  = props.arrowPosition != 'right'? arrow: null
        var rightArrow = props.arrowPosition == 'right'? arrow: null

        var children = []

        leftArrow && children.push(leftArrow)
        children.push(React.createElement(Button, React.__spread({ref: "button"},  props.buttonProps)))
        rightArrow && children.push(rightArrow)

        if (this.state.menu){
            children.push(this.state.menu)
        }

        return children
    },

    prepareButtonProps: function(props) {
        var buttonProps = assign({}, props.defaultButtonProps, props.commonProps, props.buttonProps)

        buttonProps.style = this.prepareButtonStyle(props, buttonProps)

        transfer(PROPS_2_BUTTON_PROPS, buttonProps, props)
        transfer(PROPS_2_ALL_PROPS, buttonProps, props)

        return buttonProps
    },

    prepareButtonStyle: function(props, buttonProps){
        var defaultButtonStyle = assign({}, props.defaultButtonStyle, props.padding)

        prepareRadius(props, defaultButtonStyle, props.buttonSide)
        prepareBorder(props, defaultButtonStyle, props.buttonSide)

        var style = assign({}, defaultButtonStyle, props.defaultCommonStyle, props.commonStyle, buttonProps.style, props.buttonStyle)

        return style //no need to normalize, since button does this for you
    },

    prepareArrowProps: function(props) {
        var arrowProps = assign({}, props.defaultArrowProps, props.commonProps, props.arrowProps)

        arrowProps.style = this.prepareArrowStyle(props, arrowProps)

        transfer(PROPS_2_ARROW_PROPS, arrowProps, props)
        transfer(PROPS_2_ALL_PROPS, arrowProps, props)

        // debugger

        var renderMenu   = arrowProps.renderMenu
        var onMenuChange = arrowProps.onMenuChange

        arrowProps.onMenuChange = function(){
            ;(onMenuChange || emptyFn).apply(null, arguments)

            if (renderMenu === false){
                return
            }

            this.onMenuChange.apply(this, arguments)
        }.bind(this)

        arrowProps.renderMenu = false
        arrowProps.wrapperFactory = returnFalse
        // arrowProps.getAlignTarget = this.getAlignTarget

        return arrowProps
    },

    getAlignTarget: function() {
        return this.getDOMNode()
    },

    onMenuChange: function(menu) {
        if (!menu && !this.state.menu){
            return
        }

        this.setState({
            menu: menu
        })
    },

    prepareArrowStyle: function(props, arrowProps){
        var defaultArrowStyle = assign({}, props.defaultArrowStyle, props.padding)

        prepareRadius(props, defaultArrowStyle, props.arrowSide)
        prepareBorder(props, defaultArrowStyle, props.arrowSide)

        var style = assign({}, defaultArrowStyle, props.defaultCommonStyle, props.commonStyle, props.arrowStyle, arrowProps.style)

        return style //no need to normalize, since button does this for you
    },

    prepareStyle: function(props) {
        var defaultStyle = assign({}, props.defaultStyle)

        if (props.block){
            defaultStyle.display = 'flex'
        }

        var style = assign({}, defaultStyle, props.style)

        var padding = {}

        ;['padding','paddingTop','paddingBottom','paddingLeft','paddingRight'].forEach(function(side){
            if (style[side] != undefined){
                padding[side] = style[side]
            }
            style[side] = 0
        })

        props.padding = padding

        style.position = style.position == 'absolute'? 'absolute': 'relative'

        return style
    },

    hideMenu: function() {
        return this.refs.arrow.hideMenu()
    }
})